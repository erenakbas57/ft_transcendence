# Generated by Django 5.1.3 on 2024-12-06 14:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import usermanage.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, default='default.png', null=True, upload_to=usermanage.models.user_avatar_upload_path, verbose_name='Avatar')),
                ('is_42', models.BooleanField(default=False, verbose_name='42 User')),
                ('is_online', models.BooleanField(default=False, verbose_name='Online Status')),
                ('pong_total_matches', models.IntegerField(default=0, verbose_name='Total Pong Matches')),
                ('pong_total_wins', models.IntegerField(default=0, verbose_name='Total Pong Wins')),
                ('pong_total_losses', models.IntegerField(default=0, verbose_name='Total Pong Losses')),
                ('pong_total_time', models.FloatField(default=0.0, verbose_name='Average Pong Match Duration (seconds)')),
                ('rps_total_matches', models.IntegerField(default=0, verbose_name='Total RPS Matches')),
                ('rps_total_wins', models.IntegerField(default=0, verbose_name='Total RPS Wins')),
                ('rps_total_losses', models.IntegerField(default=0, verbose_name='Total RPS Losses')),
                ('rps_total_time', models.FloatField(default=0.0, verbose_name='Average RPS Match Duration (seconds)')),
                ('followers', models.ManyToManyField(related_name='followed_by', to=settings.AUTH_USER_MODEL)),
                ('following', models.ManyToManyField(related_name='follows', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_type', models.IntegerField(choices=[(1, 'Pong'), (2, 'Rock Paper Scissors')], verbose_name='Game Type')),
                ('user1_score', models.IntegerField(default=0, verbose_name='User 1 Score')),
                ('user2_score', models.IntegerField(default=0, verbose_name='User 2 Score')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date')),
                ('time_duration', models.IntegerField(default=0, verbose_name='Time Duration')),
                ('loser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loser', to=settings.AUTH_USER_MODEL, verbose_name='Loser')),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user1', to=settings.AUTH_USER_MODEL, verbose_name='User 1')),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user2', to=settings.AUTH_USER_MODEL, verbose_name='User 2')),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winner', to=settings.AUTH_USER_MODEL, verbose_name='Winner')),
            ],
        ),
    ]
